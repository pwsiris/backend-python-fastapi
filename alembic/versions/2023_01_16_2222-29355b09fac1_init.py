"""INIT

Revision ID: 29355b09fac1
Revises:
Create Date: 2023-01-16 22:22:37.805348

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.schema import CreateSchema, CreateSequence, DropSchema, DropSequence

from alembic import op

# revision identifiers, used by Alembic.
revision = "29355b09fac1"
down_revision = None
branch_labels = None
depends_on = None

sequences = [
    "anime_id_seq",
    "game_id_seq",
    "game_genre_id_seq",
    "manga_id_seq",
    "user_id_seq",
    "want_to_play_id_seq",
]


def upgrade() -> None:
    op.execute(CreateSchema("pwsi"))

    for sequence in sequences:
        op.execute(CreateSequence(sa.Sequence(op.f(sequence), schema="pwsi")))

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "anime",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('pwsi.anime_id_seq'::regclass)"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("name_ru", sa.String(), nullable=True),
        sa.Column("link_mal", sa.String(), nullable=True),
        sa.Column("link_shiki", sa.String(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("order_by", sa.Integer(), nullable=True),
        sa.Column("comment", sa.String(), nullable=True),
        sa.Column("added_date", sa.Date(), nullable=False),
        sa.Column("completed_date", sa.Date(), nullable=True),
        sa.Column(
            "score",
            sa.Numeric(precision=4, scale=1, asdecimal=False),
            nullable=True,
        ),
        sa.Column("type", sa.String(), nullable=True),
        sa.Column("episodes", sa.Integer(), nullable=True),
        sa.Column("watched", sa.Integer(), nullable=True),
        sa.Column("series", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema="pwsi",
    )
    op.create_table(
        "game",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('pwsi.game_id_seq'::regclass)"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("link", sa.String(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("order_by", sa.Integer(), nullable=True),
        sa.Column("comment", sa.String(), nullable=True),
        sa.Column("added_date", sa.Date(), nullable=False),
        sa.Column("completed_date", sa.Date(), nullable=True),
        sa.Column(
            "score",
            sa.Numeric(precision=4, scale=1, asdecimal=False),
            nullable=True,
        ),
        sa.Column("genre", sa.Integer(), nullable=True),
        sa.Column("records", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema="pwsi",
    )
    op.create_table(
        "game_genre",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('pwsi.game_genre_id_seq'::regclass)"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="pwsi",
    )
    op.create_table(
        "manga",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('pwsi.manga_id_seq'::regclass)"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("name_ru", sa.String(), nullable=True),
        sa.Column("link", sa.String(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("order_by", sa.Integer(), nullable=True),
        sa.Column("comment", sa.String(), nullable=True),
        sa.Column("added_date", sa.Date(), nullable=False),
        sa.Column("completed_date", sa.Date(), nullable=True),
        sa.Column(
            "score",
            sa.Numeric(precision=4, scale=1, asdecimal=False),
            nullable=True,
        ),
        sa.Column("type", sa.String(), nullable=True),
        sa.Column("chapters", sa.Integer(), nullable=True),
        sa.Column("readed", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema="pwsi",
    )
    op.create_table(
        "user",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('pwsi.user_id_seq'::regclass)"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("stream_status", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema="pwsi",
    )
    op.create_table(
        "want_to_play",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('pwsi.want_to_play_id_seq'::regclass)"),
            nullable=False,
        ),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("game_id", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema="pwsi",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("want_to_play", schema="pwsi")
    op.drop_table("user", schema="pwsi")
    op.drop_table("manga", schema="pwsi")
    op.drop_table("game_genre", schema="pwsi")
    op.drop_table("game", schema="pwsi")
    op.drop_table("anime", schema="pwsi")
    # ### end Alembic commands ###

    for sequence in sequences:
        op.execute(DropSequence(sa.Sequence(op.f(sequence), schema="pwsi")))

    op.execute(DropSchema("pwsi"))
